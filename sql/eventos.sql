-- MySQL Script generated by MySQL Workbench
-- Fri May 18 09:46:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema eventos
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema eventos
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `eventos`;
USE `eventos` ;

-- -----------------------------------------------------
-- Table `eventos`.`c_administrador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_administrador` (
  `cod_administrador` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) NULL DEFAULT NULL,
  `email` VARCHAR(50) NULL DEFAULT NULL,
  `senha` VARCHAR(40) NULL DEFAULT NULL,
  `ultimo_acesso` DATETIME NULL DEFAULT NULL,
  `super_admin` CHAR(1) NOT NULL DEFAULT 'n',
  `trocar_senha` CHAR(1) NOT NULL DEFAULT 'n',
  `conta_ativa` ENUM('s', 'n') NULL DEFAULT 's',
  PRIMARY KEY (`cod_administrador`));


-- -----------------------------------------------------
-- Table `eventos`.`c_endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_endereco` (
  `cod_endereco` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(70) NULL DEFAULT NULL,
  `numero` INT(11) NULL DEFAULT NULL,
  `rua` VARCHAR(50) NULL DEFAULT NULL,
  `bairro` VARCHAR(50) NULL DEFAULT NULL,
  `cidade` VARCHAR(50) NULL DEFAULT NULL,
  `estado` CHAR(2) NULL DEFAULT NULL,
  `pais` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`cod_endereco`));


-- -----------------------------------------------------
-- Table `eventos`.`c_evento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_evento` (
  `cod_evento` INT(11) NOT NULL AUTO_INCREMENT,
  `descricao_evento` VARCHAR(70) NULL DEFAULT NULL,
  `data_realizacao` DATE NULL DEFAULT NULL,
  `cod_endereco` INT(11) NULL DEFAULT NULL,
  `inscricoes_abertas` ENUM('s', 'n') NOT NULL DEFAULT 's',
  `cod_administrador` INT(11) NOT NULL,
  PRIMARY KEY (`cod_evento`),
  INDEX `fk_cevento_cendereco` (`cod_endereco` ASC),
  INDEX `fk_c_evento_c_administrador1_idx` (`cod_administrador` ASC),
  CONSTRAINT `fk_c_evento_c_administrador1`
    FOREIGN KEY (`cod_administrador`)
    REFERENCES `eventos`.`c_administrador` (`cod_administrador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cevento_cendereco`
    FOREIGN KEY (`cod_endereco`)
    REFERENCES `eventos`.`c_endereco` (`cod_endereco`));


-- -----------------------------------------------------
-- Table `eventos`.`c_acessos_administrador_evento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_acessos_administrador_evento` (
  `cod_acesso` INT(11) NOT NULL AUTO_INCREMENT,
  `cod_administrador` INT(11) NOT NULL,
  `cod_evento` INT(11) NOT NULL,
  PRIMARY KEY (`cod_acesso`),
  INDEX `fk_acessos_administrador_evento_c_administrador1_idx` (`cod_administrador` ASC),
  INDEX `fk_acessos_administrador_evento_c_evento1_idx` (`cod_evento` ASC),
  CONSTRAINT `fk_acessos_administrador_evento_c_administrador1`
    FOREIGN KEY (`cod_administrador`)
    REFERENCES `eventos`.`c_administrador` (`cod_administrador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_acessos_administrador_evento_c_evento1`
    FOREIGN KEY (`cod_evento`)
    REFERENCES `eventos`.`c_evento` (`cod_evento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `eventos`.`c_certificado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_certificado` (
  `inicio_certificado` TEXT NULL DEFAULT NULL,
  `corpo_certificado` TEXT NULL DEFAULT NULL,
  `cod_evento` INT(11) NULL DEFAULT NULL,
  `c_evento_cod_evento` INT(11) NOT NULL,
  INDEX `fk_c_certificado_c_evento1_idx` (`c_evento_cod_evento` ASC),
  CONSTRAINT `fk_c_certificado_c_evento1`
    FOREIGN KEY (`c_evento_cod_evento`)
    REFERENCES `eventos`.`c_evento` (`cod_evento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `eventos`.`c_livro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_livro` (
  `cod_livro` INT(11) NOT NULL AUTO_INCREMENT,
  `numero_do_livro` INT(11) NOT NULL,
  `numero_de_folhas` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`cod_livro`));


-- -----------------------------------------------------
-- Table `eventos`.`c_folha`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_folha` (
  `cod_folha` INT(11) NOT NULL AUTO_INCREMENT,
  `numero_da_folha` INT(11) NULL DEFAULT NULL,
  `numero_de_registros` INT(11) NULL DEFAULT NULL,
  `cod_livro` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`cod_folha`),
  INDEX `fk_cfolha_clivro` (`cod_livro` ASC),
  CONSTRAINT `fk_cfolha_clivro`
    FOREIGN KEY (`cod_livro`)
    REFERENCES `eventos`.`c_livro` (`cod_livro`));


-- -----------------------------------------------------
-- Table `eventos`.`c_participante`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_participante` (
  `cod_participante` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) NULL DEFAULT NULL,
  `email` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`cod_participante`));


-- -----------------------------------------------------
-- Table `eventos`.`c_liberacao_certificado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_liberacao_certificado` (
  `cod_liberacao_certificado` INT(11) NOT NULL AUTO_INCREMENT,
  `numero_registro` INT(11) NULL DEFAULT NULL,
  `numero_folha` INT(11) NULL DEFAULT NULL,
  `numero_livro` INT(11) NULL DEFAULT NULL,
  `nome` VARCHAR(50) NULL DEFAULT NULL,
  `email` VARCHAR(50) NULL DEFAULT NULL,
  `descricao_evento` VARCHAR(70) NULL DEFAULT NULL,
  `data_realizacao` DATE NULL DEFAULT NULL,
  `data_liberacao` DATE NULL DEFAULT NULL,
  `liberacao_disponivel` ENUM('s', 'n') NULL DEFAULT 's',
  `texto_inicio_certificado` TEXT NULL DEFAULT NULL,
  `texto_corpo_certificado` TEXT NULL DEFAULT NULL,
  `cod_participante` INT(11) NULL DEFAULT NULL,
  `cod_evento` INT(11) NULL DEFAULT NULL,
  `cod_administrador` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`cod_liberacao_certificado`),
  INDEX `fk_cliberacao_cparticipante` (`cod_participante` ASC),
  INDEX `fk_cliberacao_cevento` (`cod_evento` ASC),
  INDEX `fk_cliberacao_cadministrador` (`cod_administrador` ASC),
  CONSTRAINT `fk_cliberacao_cadministrador`
    FOREIGN KEY (`cod_administrador`)
    REFERENCES `eventos`.`c_administrador` (`cod_administrador`),
  CONSTRAINT `fk_cliberacao_cevento`
    FOREIGN KEY (`cod_evento`)
    REFERENCES `eventos`.`c_evento` (`cod_evento`),
  CONSTRAINT `fk_cliberacao_cparticipante`
    FOREIGN KEY (`cod_participante`)
    REFERENCES `eventos`.`c_participante` (`cod_participante`));


-- -----------------------------------------------------
-- Table `eventos`.`c_registro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventos`.`c_registro` (
  `cod_registro` INT(11) NOT NULL AUTO_INCREMENT,
  `numero_do_registro` INT(11) NULL DEFAULT NULL,
  `cod_evento` INT(11) NULL DEFAULT NULL,
  `cod_participante` INT(11) NULL DEFAULT NULL,
  `cod_folha` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`cod_registro`),
  INDEX `fk_cregistro_cevento` (`cod_evento` ASC),
  INDEX `fk_cregistro_cfolha` (`cod_folha` ASC),
  INDEX `fk_cregistro_cparticipante` (`cod_participante` ASC),
  CONSTRAINT `fk_cregistro_cevento`
    FOREIGN KEY (`cod_evento`)
    REFERENCES `eventos`.`c_evento` (`cod_evento`),
  CONSTRAINT `fk_cregistro_cfolha`
    FOREIGN KEY (`cod_folha`)
    REFERENCES `eventos`.`c_folha` (`cod_folha`),
  CONSTRAINT `fk_cregistro_cparticipante`
    FOREIGN KEY (`cod_participante`)
    REFERENCES `eventos`.`c_participante` (`cod_participante`));

USE `eventos` ;

-- -----------------------------------------------------
-- function ATUALIZAR_ADMINISTRADOR
-- -----------------------------------------------------

DELIMITER $$
USE `eventos`$$
CREATE DEFINER=`admin`@`%` FUNCTION `ATUALIZAR_ADMINISTRADOR`(cod_administrador_informado int, nome_informado varchar(50), email_informado varchar(50), super_admin_informado char(1), trocar_senha_informado char(1), conta_ativa_informado char(1)) RETURNS int(11)
BEGIN
	
    declare super_admin_cursor char(1);
	declare senha_cursor varchar(40);
    declare ultimo_acesso_cursor datetime;
    declare c1 cursor for
		select senha, ultimo_acesso, super_admin from c_administrador where cod_administrador = cod_administrador_informado;
    
	OPEN c1;
		FETCH c1 INTO senha_cursor, ultimo_acesso_cursor, super_admin_cursor;
	CLOSE c1;

	if super_admin_cursor = 'n' then
    
		delete from c_administrador where cod_administrador = cod_administrador_informado;
		insert into c_administrador values( cod_administrador_informado, nome_informado, email_informado, senha_cursor, ultimo_acesso_cursor, super_admin_informado, trocar_senha_informado, conta_ativa_informado);
		return 3;
        
    else
		return 4;
    end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function ATUALIZAR_ENDERECO
-- -----------------------------------------------------

DELIMITER $$
USE `eventos`$$
CREATE DEFINER=`admin`@`%` FUNCTION `ATUALIZAR_ENDERECO`(cod_endereco_informado int, descricao_informado varchar(50), numero_informado int, rua_informado varchar(50), bairro_informado varchar(50), cidade_informado varchar(50), estado_informado char(2), pais_informado varchar(50)) RETURNS int(11)
BEGIN

	declare numero_cursor int;
    declare c1 cursor for
		select numero from c_endereco 
        where 
        descricao = descricao_informado
        and numero = numero_informado 
        and rua = rua_informado 
        and bairro = bairro_informado 
        and cidade = cidade_informado 
        and estado = estado_informado
        and pais = pais_informado;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET numero_cursor = null;
    
	OPEN c1;
		FETCH c1 INTO numero_cursor;
	CLOSE c1;
    
    if numero_cursor is null then
		delete from c_endereco where cod_endereco = cod_endereco_informado;
		insert into c_endereco values( cod_endereco_informado, descricao_informado, numero_informado, rua_informado, bairro_informado, cidade_informado, estado_informado, pais_informado);
    	return 3;
    else
		return 2;
    end if;	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CADASTRAR_ADMINISTRADOR
-- -----------------------------------------------------

DELIMITER $$
USE `eventos`$$
CREATE DEFINER=`admin`@`%` FUNCTION `CADASTRAR_ADMINISTRADOR`( nome_informado varchar(50), email_informado varchar(50), senha_informado varchar(40), super_admin_informado char(1), trocar_senha_informado char(1)) RETURNS int(11)
BEGIN
	
    DECLARE email_cursor varchar(50);
	DECLARE c1 CURSOR FOR
		SELECT email
		FROM c_administrador
		WHERE email = email_informado;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET email_cursor = null;
     
	OPEN c1;
		FETCH c1 INTO email_cursor;
	CLOSE c1;
    
    
    if email_cursor is null then
		INSERT INTO c_administrador VALUES( DEFAULT, nome_informado, email_informado, senha_informado, now(), super_admin_informado, trocar_senha_informado, DEFAULT);
		return 1;
    else
		return 2;
    end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CADASTRAR_ENDERECO
-- -----------------------------------------------------

DELIMITER $$
USE `eventos`$$
CREATE DEFINER=`admin`@`%` FUNCTION `CADASTRAR_ENDERECO`( descricao_informa varchar(50), numero_informa int, rua_informa varchar(50), bairro_informa varchar(50), cidade_informa varchar(50), estado_informa char(2), pais_informa varchar(50)) RETURNS int(11)
BEGIN

	declare numero_cursor int;
    declare c1 cursor for
		select numero from c_endereco where numero = numero_informa 
        and rua = rua_informa 
        and bairro = bairro_informa 
        and cidade = cidade_informa 
        and estado = estado_informa;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET numero_cursor = null;
    
	OPEN c1;
		FETCH c1 INTO numero_cursor;
	CLOSE c1;
    
    if numero_cursor is null then
		insert into c_endereco values( DEFAULT, descricao_informa, numero_informa, rua_informa, bairro_informa, cidade_informa, estado_informa, pais_informa);
        return 1;
    else
		return 2;
    end if;


RETURN 1;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
